# movimientos.py
import customtkinter as ctk
from tkinter import ttk
from bd import conectar_db
from tkinter import messagebox

def mostrar_movimientos(contenido_frame):
    # Limpiar el contenido anterior
    for widget in contenido_frame.winfo_children():
        widget.destroy()
    
    # Título del módulo
    ctk.CTkLabel(
        contenido_frame, 
        text="Módulo de Movimientos",
        font=("Arial", 20, "bold")
    ).pack(pady=20)
    
    # Frame para los botones de opciones
    opciones_frame = ctk.CTkFrame(contenido_frame, fg_color="transparent")
    opciones_frame.pack(pady=30)
    
    # Botón de Salida de Artículos
    btn_salida = ctk.CTkButton(
        opciones_frame,
        text="Salida de Artículos",
        width=180,
        height=60,
        font=("Arial", 16),
        fg_color="#FF9100",
        hover_color="#E07B00",
        command=lambda: mostrar_salida_articulos(contenido_frame)
    )
    btn_salida.pack(side="left", padx=20)
    
    # Botón de Garantías
    btn_garantias = ctk.CTkButton(
        opciones_frame,
        text="Garantías",
        width=180,
        height=60,
        font=("Arial", 16),
        fg_color="#FF9100",
        hover_color="#E07B00",
        command=lambda: mostrar_garantias(contenido_frame)
    )
    btn_garantias.pack(side="left", padx=20)

def mostrar_salida_articulos(contenido_frame):
    # Limpiar el contenido anterior
    for widget in contenido_frame.winfo_children():
        widget.destroy()
    
    # Título
    ctk.CTkLabel(
        contenido_frame, 
        text="Salida de Artículos",
        font=("Arial", 20, "bold")
    ).pack(pady=20)
    
    # Aquí va el contenido específico de Salida de Artículos
    ctk.CTkLabel(
        contenido_frame,
        text="Módulo de Salida de Artículos - En desarrollo",
        font=("Arial", 14)
    ).pack(pady=50)
    
    # Botón para volver al menú principal de movimientos
    btn_volver = ctk.CTkButton(
        contenido_frame,
        text="Volver",
        width=120,
        height=40,
        command=lambda: mostrar_movimientos(contenido_frame)
    )
    btn_volver.pack(pady=20)

def mostrar_garantias(contenido_frame):
    # Limpiar el contenido anterior
    for widget in contenido_frame.winfo_children():
        widget.destroy()
    
    # Título
    ctk.CTkLabel(
        contenido_frame, 
        text="Gestión de Garantías",
        font=("Arial", 20, "bold")
    ).pack(pady=20)
    
    # Frame principal para garantías
    main_frame = ctk.CTkFrame(contenido_frame, fg_color="transparent")
    main_frame.pack(fill="both", expand=True, padx=20, pady=10)
    
    # Frame para búsqueda
    busqueda_frame = ctk.CTkFrame(main_frame, height=100)
    busqueda_frame.pack(fill="x", pady=(0, 20))
    busqueda_frame.pack_propagate(False)
    
    # Campo de código de barras
    ctk.CTkLabel(
        busqueda_frame,
        text="Código de Barras:",
        font=("Arial", 14)
    ).pack(side="left", padx=(20, 10), pady=20)
    
    codigo_entry = ctk.CTkEntry(
        busqueda_frame,
        width=200,
        height=35,
        font=("Arial", 14)
    )
    codigo_entry.pack(side="left", padx=(0, 20), pady=20)
    
    # Botón de búsqueda
    def buscar_garantia():
        codigo = codigo_entry.get().strip()
        if not codigo:
            messagebox.showwarning("Advertencia", "Por favor ingrese un código de barras")
            return
        
        try:
            conn = conectar_db()
            cursor = conn.cursor()
            
            # Consulta para obtener información de garantías
            cursor.execute("""
                SELECT 
                    m.id_movimiento, 
                    TO_CHAR(m.fecha_entrega, 'DD/MM/YYYY HH24:MI:SS') AS fecha_entrega,
                    p.descripcion, 
                    g.gar_duracion, 
                    TO_CHAR(m.fecha_entrega + (g.gar_duracion || ' months')::interval, 'DD/MM/YYYY') AS fecha_vencimiento,
                    CASE 
                        WHEN m.fecha_entrega + (g.gar_duracion || ' months')::interval >= CURRENT_DATE 
                        THEN 'VIGENTE' 
                        ELSE 'VENCIDA' 
                    END as estado,
                    m.id_usuario
                    FROM desarrollo.movimientos m
                    JOIN desarrollo.stock p 
                        ON m.id_producto = p.id_articulo
                    LEFT JOIN desarrollo.garantias g 
                        ON g.gar_categoria = p.categoria
                    WHERE m.cod_barra = %s AND m.tipo_movimiento = 'S'
                    ORDER BY m.fecha_entrega DESC
                LIMIT 10
            """, (codigo,))
            
            resultados = cursor.fetchall()
            cursor.close()
            conn.close()
            
            # Limpiar treeview
            for item in tree.get_children():
                tree.delete(item)
            
            # Insertar resultados
            if resultados:
                for row in resultados:
                    tree.insert("", "end", values=row)
            else:
                messagebox.showinfo("Información", "No se encontraron garantías para este código de barras")
                
        except Exception as e:
            messagebox.showerror("Error", f"No se pudo conectar a la base de datos:\n{e}")
    
    btn_buscar = ctk.CTkButton(
        busqueda_frame,
        text="Buscar",
        width=100,
        height=35,
        command=buscar_garantia
    )
    btn_buscar.pack(side="left", padx=(0, 20), pady=20)
    
    # Botón para limpiar búsqueda
    def limpiar_busqueda():
        codigo_entry.delete(0, "end")
        for item in tree.get_children():
            tree.delete(item)
    
    btn_limpiar = ctk.CTkButton(
        busqueda_frame,
        text="Limpiar",
        width=100,
        height=35,
        fg_color="#6c757d",
        hover_color="#5a6268",
        command=limpiar_busqueda
    )
    btn_limpiar.pack(side="left", padx=(0, 20), pady=20)
    
    # Frame para resultados
    resultados_frame = ctk.CTkFrame(main_frame)
    resultados_frame.pack(fill="both", expand=True)
    
    # Treeview para mostrar los resultados
    columns = ("ID Movimiento", "Fecha de Entrega", "Producto", "Duración (meses)", 
               "Fin Garantía", "Estado", "Usuario Entrega")
    
    tree = ttk.Treeview(resultados_frame, columns=columns, show="headings", height=8)
    
    # Configurar columnas
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=120, anchor="center")
    
    # Ajustar algunas columnas
    tree.column("Producto", width=200)
    tree.column("Fin Garantía", width=120)
    
    # Scrollbar
    scrollbar = ttk.Scrollbar(resultados_frame, orient="vertical", command=tree.yview)
    tree.configure(yscrollcommand=scrollbar.set)
    
    tree.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")
    
    # Botón para volver al menú principal de movimientos
    btn_volver = ctk.CTkButton(
        main_frame,
        text="Volver",
        width=120,
        height=40,
        command=lambda: mostrar_movimientos(contenido_frame)
    )
    btn_volver.pack(pady=20)
