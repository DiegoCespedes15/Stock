# movimientos.py
import customtkinter as ctk
from tkinter import ttk
from bd import conectar_db
from tkinter import messagebox
from datetime import datetime
import sqlite3

def mostrar_movimientos(contenido_frame):
    # Limpiar el contenido anterior
    for widget in contenido_frame.winfo_children():
        widget.destroy()
    
    # Título del módulo
    ctk.CTkLabel(
        contenido_frame, 
        text="Módulo de Movimientos",
        font=("Arial", 20, "bold")
    ).pack(pady=20)
    
    # Frame para los botones de opciones
    opciones_frame = ctk.CTkFrame(contenido_frame, fg_color="transparent")
    opciones_frame.pack(pady=30)
    
    # Botón de Salida de Artículos
    btn_salida = ctk.CTkButton(
        opciones_frame,
        text="Salida de Artículos",
        width=180,
        height=60,
        font=("Arial", 16),
        fg_color="#FF9100",
        hover_color="#E07B00",
        command=lambda: mostrar_salida_articulos(contenido_frame)
    )
    btn_salida.pack(side="left", padx=20)
    
    # Botón de Garantías
    btn_garantias = ctk.CTkButton(
        opciones_frame,
        text="Garantías",
        width=180,
        height=60,
        font=("Arial", 16),
        fg_color="#FF9100",
        hover_color="#E07B00",
        command=lambda: mostrar_garantias(contenido_frame)
    )
    btn_garantias.pack(side="left", padx=20)

def mostrar_salida_articulos(contenido_frame):
    # Limpiar el contenido anterior
    for widget in contenido_frame.winfo_children():
        widget.destroy()
    
    # Título
    ctk.CTkLabel(
        contenido_frame, 
        text="Salida de Artículos - Registro de Entrega",
        font=("Arial", 20, "bold")
    ).pack(pady=20)
    
    # Frame principal
    main_frame = ctk.CTkFrame(contenido_frame, fg_color="transparent")
    main_frame.pack(fill="both", expand=True, padx=20, pady=10)
    
    # Frame para el formulario
    form_frame = ctk.CTkFrame(main_frame)
    form_frame.pack(pady=10, fill="x", padx=50)
    
    # Variables
    busqueda_var = ctk.StringVar()  # Para ID, código de barras o descripción
    cantidad_var = ctk.StringVar(value="1")
    motivo_var = ctk.StringVar()
    cliente_var = ctk.StringVar()
    cod_barra_var = ctk.StringVar()  # Código de barras manual
    producto_info_var = ctk.StringVar(value="Seleccione un producto")
    id_articulo_actual = None
    id_usuario_actual = None
    codigo_barras_actual = None  # Para guardar el código de barras real del producto
    
    # Función para obtener usuario válido
    def obtener_usuario_valido():
        try:
            conn = conectar_db()
            cursor = conn.cursor()
            cursor.execute("SELECT user_key, user_name FROM desarrollo.usuarios WHERE user_active >= '1' LIMIT 1")
            usuario = cursor.fetchone()
            cursor.close()
            conn.close()
            
            if usuario:
                return usuario[0]  # Retorna el ID del usuario
            else:
                # Si no hay usuarios activos, usar el primero que encuentre
                conn = conectar_db()
                cursor = conn.cursor()
                cursor.execute("SELECT user_key FROM desarrollo.usuarios LIMIT 1")
                usuario = cursor.fetchone()
                cursor.close()
                conn.close()
                
                if usuario:
                    return usuario[0]
                else:
                    messagebox.showerror("Error", "No hay usuarios registrados en el sistema")
                    return None
                    
        except Exception as e:
            print(f"Error al obtener usuario: {e}")
            return None
    
    # Función para buscar producto por ID, código de barras o descripción
    def buscar_producto():
        nonlocal id_articulo_actual, id_usuario_actual, codigo_barras_actual

        # Verificar que haya un usuario válido
        if id_usuario_actual is None:
            id_usuario_actual = obtener_usuario_valido()
            if id_usuario_actual is None:
                messagebox.showerror("Error", "No se puede operar sin un usuario válido")
                return

        busqueda = busqueda_var.get().strip()
        if not busqueda:
            messagebox.showwarning("Advertencia", "Ingrese un ID, código de barras o descripción")
            return

        try:
            conn = conectar_db()
            cursor = conn.cursor()

            # PRIMERO: Buscar solo en stock por ID o descripción
            cursor.execute("""
                SELECT id_articulo, descripcion, cant_inventario, categoria, precio_unit
                FROM desarrollo.stock 
                WHERE id_articulo::varchar = %s 
                   OR descripcion ILIKE %s
                LIMIT 1
            """, (busqueda, f"%{busqueda}%"))

            producto = cursor.fetchone()

            # SEGUNDO: Si no encontró, buscar por código de barras en movimientos
            if not producto:
                cursor.execute("""
                    SELECT s.id_articulo, s.descripcion, s.cant_inventario, s.categoria, s.precio_unit, m.cod_barra
                    FROM desarrollo.stock s
                    JOIN desarrollo.movimientos m ON s.id_articulo = m.id_producto
                    WHERE m.cod_barra = %s
                    LIMIT 1
                """, (busqueda,))
                producto = cursor.fetchone()
                tiene_cod_barra = True
            else:
                # Si encontró por ID/descripción, verificar si tiene código de barras en movimientos
                cursor.execute("""
                    SELECT cod_barra 
                    FROM desarrollo.movimientos 
                    WHERE id_producto = %s 
                    LIMIT 1
                """, (producto[0],))
                cod_barra_result = cursor.fetchone()
                tiene_cod_barra = cod_barra_result is not None
                producto = producto + (cod_barra_result[0] if cod_barra_result else None,)

            cursor.close()
            conn.close()

            if producto:
                id_articulo_actual = producto[0]
                # El código de barras está en la posición 5 si vino de movimientos
                codigo_barras_actual = producto[5] if len(producto) > 5 else None
                producto_info_var.set(f"{producto[1]} | Stock: {producto[2]} | Precio: ${producto[4]}")

                # Habilitar campos
                cantidad_entry.configure(state="normal")
                motivo_combobox.configure(state="readonly")
                cliente_entry.configure(state="normal")
                cod_barra_entry.configure(state="normal")
                btn_registrar.configure(state="normal")

                # Si el producto tiene código de barras, mostrarlo en el campo
                if codigo_barras_actual:
                    cod_barra_var.set(codigo_barras_actual)
            else:
                producto_info_var.set("Producto no encontrado")
                messagebox.showwarning("Advertencia", "Producto no encontrado")
                # Mantener campos deshabilitados
                cantidad_entry.configure(state="disabled")
                motivo_combobox.configure(state="disabled")
                cliente_entry.configure(state="disabled")
                cod_barra_entry.configure(state="disabled")
                btn_registrar.configure(state="disabled")

        except Exception as e:
            messagebox.showerror("Error", f"No se pudo buscar el producto:\n{e}")
    
    # Función para registrar la salida
    def registrar_salida():
        nonlocal id_articulo_actual, id_usuario_actual, codigo_barras_actual
        
        # Verificar usuario
        if id_usuario_actual is None:
            id_usuario_actual = obtener_usuario_valido()
            if id_usuario_actual is None:
                messagebox.showerror("Error", "No se puede operar sin un usuario válido")
                return

        cantidad_str = cantidad_var.get().strip()
        motivo = motivo_var.get()
        cliente = cliente_var.get().strip()
        cod_barra_manual = cod_barra_var.get().strip()

        # Verificar que se haya seleccionado un producto
        if id_articulo_actual is None:
            messagebox.showwarning("Advertencia", "Seleccione un producto primero")
            return

        if not cantidad_str:
            messagebox.showwarning("Advertencia", "Ingrese la cantidad")
            return

        try:
            cantidad = int(cantidad_str)
            if cantidad <= 0:
                raise ValueError("La cantidad debe ser mayor a 0")
        except ValueError:
            messagebox.showwarning("Advertencia", "Cantidad debe ser un número válido")
            return

        if not motivo:
            messagebox.showwarning("Advertencia", "Seleccione un motivo")
            return

        # Usar el código de barras manual si se ingresó, sino usar el del producto
        cod_barra_final = cod_barra_manual if cod_barra_manual else codigo_barras_actual

        try:
            conn = conectar_db()
            if conn is None:
                messagebox.showerror("Error", "No se pudo conectar a la base de datos")
                return

            cursor = conn.cursor()

            # 1. Verificar stock disponible
            cursor.execute("SELECT cant_inventario FROM desarrollo.stock WHERE id_articulo = %s", (id_articulo_actual,))
            resultado = cursor.fetchone()

            if resultado is None:
                messagebox.showerror("Error", "Producto no encontrado en la base de datos")
                cursor.close()
                conn.close()
                return

            stock_actual = resultado[0]
            
            if cantidad > stock_actual:
                messagebox.showerror("Error", f"Stock insuficiente. Stock actual: {stock_actual}")
                cursor.close()
                conn.close()
                return

            # 2. Insertar en movimientos (con código de barras correcto)
            cursor.execute("""
                INSERT INTO desarrollo.movimientos 
                (id_producto, tipo_movimiento, cantidad, motivo, id_usuario, cod_barra, cliente)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (id_articulo_actual, 'SALIDA', cantidad, motivo, id_usuario_actual, cod_barra_final, cliente or None))

            # 3. Actualizar stock
            cursor.execute("""
                UPDATE desarrollo.stock 
                SET cant_inventario = cant_inventario - %s,
                    precio_total = precio_unit * (cant_inventario - %s)
                WHERE id_articulo = %s
            """, (cantidad, cantidad, id_articulo_actual))
            
            conn.commit()
            cursor.close()
            conn.close()

            messagebox.showinfo("Éxito", "Salida de artículo registrada correctamente")

            # Limpiar formulario
            limpiar_formulario()

            # Recargar historial
            cargar_historial()
        
        except Exception as e:
            if 'conn' in locals():
                try:
                    conn.rollback()
                    cursor.close()
                    conn.close()
                except:
                    pass
            messagebox.showerror("Error", f"No se pudo registrar la salida:\n{str(e)}")
    
    # Función para limpiar formulario
    def limpiar_formulario():
        nonlocal id_articulo_actual, codigo_barras_actual
        busqueda_var.set("")
        cantidad_var.set("1")
        motivo_var.set("")
        cliente_var.set("")
        cod_barra_var.set("")
        producto_info_var.set("Seleccione un producto")
        cantidad_entry.configure(state="disabled")
        motivo_combobox.configure(state="disabled")
        cliente_entry.configure(state="disabled")
        cod_barra_entry.configure(state="disabled")
        btn_registrar.configure(state="disabled")
        id_articulo_actual = None
        codigo_barras_actual = None
    
    # Función para cargar historial
    def cargar_historial():
        for item in tree.get_children():
            tree.delete(item)
    
        try:
            conn = conectar_db()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    m.id_movimiento, 
                    TO_CHAR(m.fecha_entrega, 'DD/MM/YYYY HH24:MI:SS') AS fecha_entrega,
                    s.descripcion, 
                    m.motivo,
                    g.gar_duracion,
                    TO_CHAR(m.fecha_entrega + (g.gar_duracion || ' months')::interval, 'DD/MM/YYYY') AS fecha_vencimiento,
                    CASE 
                        WHEN m.fecha_entrega + (g.gar_duracion || ' months')::interval >= CURRENT_DATE 
                        THEN 'VIGENTE' 
                        ELSE 'VENCIDA' 
                    END as estado,
                    u.user_key,
                    m.cod_barra
                FROM desarrollo.movimientos m
                JOIN desarrollo.stock s ON m.id_producto = s.id_articulo
                LEFT JOIN desarrollo.usuarios u ON m.id_usuario = u.user_key
                LEFT JOIN desarrollo.garantias g ON g.gar_categoria = s.categoria
                ORDER BY m.fecha_entrega DESC
                LIMIT 10
            """)

            for row in cursor.fetchall():
                tree.insert("", "end", values=(
                    row[0],          # ID Movimiento
                    row[1],           # Fecha
                    row[2],          # Producto
                    row[3],          # Motivo
                    row[4],          # Duración garantía
                    row[5],          # Fin Garantía
                    row[6],          # Estado
                    row[7],         # Usuario
                    row[8]        # Código de barras
                ))

            cursor.close()
            conn.close()

        except Exception as e:
            print(f"Error al cargar historial: {e}")
    
    # CREACIÓN DE WIDGETS
    ctk.CTkLabel(form_frame, text="Registro de Salida de Artículos", font=("Arial", 16, "bold")).grid(row=0, column=0, columnspan=3, pady=15)
    
    # Búsqueda (ID, código de barras o descripción)
    ctk.CTkLabel(form_frame, text="ID, Código de Barras o Descripción:", font=("Arial", 12)).grid(row=1, column=0, padx=10, pady=10, sticky="w")
    busqueda_entry = ctk.CTkEntry(form_frame, textvariable=busqueda_var, width=300)
    busqueda_entry.grid(row=1, column=1, padx=10, pady=10, sticky="w")
    
    # Botón buscar
    btn_buscar = ctk.CTkButton(form_frame, text="Buscar Producto", command=buscar_producto, width=120)
    btn_buscar.grid(row=1, column=2, padx=10, pady=10, sticky="w")
    
    # Info del producto
    ctk.CTkLabel(form_frame, text="Producto Seleccionado:", font=("Arial", 12)).grid(row=2, column=0, padx=10, pady=5, sticky="w")
    info_label = ctk.CTkLabel(form_frame, textvariable=producto_info_var, text_color="#3b82f6", font=("Arial", 11, "bold"))
    info_label.grid(row=2, column=1, columnspan=2, padx=10, pady=5, sticky="w")
    
    # Cantidad
    ctk.CTkLabel(form_frame, text="Cantidad a Entregar:", font=("Arial", 12)).grid(row=3, column=0, padx=10, pady=10, sticky="w")
    cantidad_entry = ctk.CTkEntry(form_frame, textvariable=cantidad_var, width=100, state="disabled")
    cantidad_entry.grid(row=3, column=1, padx=10, pady=10, sticky="w")
    
    # Motivo
    ctk.CTkLabel(form_frame, text="Motivo de Salida:", font=("Arial", 12)).grid(row=4, column=0, padx=10, pady=10, sticky="w")
    motivos = ["VENTA", "COMPRA", "CONSIGNACION", "MUESTRA", "USO INTERNO", "OTRO"]
    motivo_combobox = ttk.Combobox(form_frame, textvariable=motivo_var, values=motivos, state="disabled", width=27)
    motivo_combobox.grid(row=4, column=1, padx=10, pady=10, sticky="w")
    
    # Cliente
    ctk.CTkLabel(form_frame, text="Cliente (opcional):", font=("Arial", 12)).grid(row=5, column=0, padx=10, pady=10, sticky="w")
    cliente_entry = ctk.CTkEntry(form_frame, textvariable=cliente_var, width=200, state="disabled")
    cliente_entry.grid(row=5, column=1, padx=10, pady=10, sticky="w")
    
    # Código de Barras Manual
    ctk.CTkLabel(form_frame, text="Código de Barras Manual:", font=("Arial", 12)).grid(row=6, column=0, padx=10, pady=10, sticky="w")
    cod_barra_entry = ctk.CTkEntry(form_frame, textvariable=cod_barra_var, width=200, state="disabled")
    cod_barra_entry.grid(row=6, column=1, padx=10, pady=10, sticky="w")
    
    # Botones
    btn_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
    btn_frame.grid(row=7, column=0, columnspan=3, pady=20)
    
    btn_registrar = ctk.CTkButton(
        btn_frame,
        text="Registrar Salida",
        width=150,
        height=40,
        command=registrar_salida,
        fg_color="#FF9100", 
        hover_color="#E07B00",
        font=("Arial", 12, "bold"),
        state="disabled"
    )
    btn_registrar.pack(side="left", padx=10)
    
    btn_limpiar = ctk.CTkButton(
        btn_frame,
        text="Limpiar Formulario",
        width=150,
        height=40,
        command=limpiar_formulario,
        fg_color="#6c757d",
        hover_color="#5a6268",
        font=("Arial", 12)
    )
    btn_limpiar.pack(side="left", padx=10)
    
    # Frame para historial de movimientos recientes
    historial_frame = ctk.CTkFrame(main_frame)
    historial_frame.pack(pady=20, fill="both", expand=True, padx=50)
    
    ctk.CTkLabel(
        historial_frame,
        text="Últimas Salidas Registradas",
        font=("Arial", 14, "bold")
    ).pack(pady=10)
    
    # Tabla de historial (agregar columna para código de barras)
    columns = ("ID Movimiento", "Fecha", "Producto", "Motivo", 
               "Duración Garantía", "Fin Garantía", "Estado", "Usuario", "Código Barras")
    tree = ttk.Treeview(historial_frame, columns=columns, show="headings", height=6)
    
    # Configurar columnas
    tree.column("ID Movimiento", width=80, anchor="center")
    tree.column("Fecha", width=120, anchor="center")
    tree.column("Producto", width=200, anchor="w")
    tree.column("Motivo", width=100, anchor="center")
    tree.column("Duración Garantía", width=100, anchor="center")
    tree.column("Fin Garantía", width=100, anchor="center")
    tree.column("Estado", width=80, anchor="center")
    tree.column("Usuario", width=100, anchor="center")
    tree.column("Código Barras", width=120, anchor="center")
    
    for col in columns:
        tree.heading(col, text=col)
    
    scrollbar = ttk.Scrollbar(historial_frame, orient="vertical", command=tree.yview)
    tree.configure(yscrollcommand=scrollbar.set)
    
    tree.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")
    
    # Cargar historial inicial
    cargar_historial()
    
    # Botón para volver
    btn_volver = ctk.CTkButton(
        main_frame,
        text="Volver",
        width=200,
        height=40,
        command=lambda: mostrar_movimientos(contenido_frame),
        fg_color="#FF9100", 
        hover_color="#E07B00",
        font=("Arial", 12)
    )
    btn_volver.pack(pady=20)
    
    # Evento para buscar con Enter
    busqueda_entry.bind("<Return>", lambda e: buscar_producto())
    
    # Obtener usuario válido al iniciar
    id_usuario_actual = obtener_usuario_valido()
    if id_usuario_actual is None:
        messagebox.showerror("Error", "No se encontró un usuario válido en el sistema")
        
        
def mostrar_garantias(contenido_frame):
    # Limpiar el contenido anterior
    for widget in contenido_frame.winfo_children():
        widget.destroy()
    
    # Título
    ctk.CTkLabel(
        contenido_frame, 
        text="Gestión de Garantías",
        font=("Arial", 20, "bold")
    ).pack(pady=20)
    
    # Frame principal para garantías
    main_frame = ctk.CTkFrame(contenido_frame, fg_color="transparent")
    main_frame.pack(fill="both", expand=True, padx=20, pady=10)
    
    # Frame para búsqueda
    busqueda_frame = ctk.CTkFrame(main_frame, height=100)
    busqueda_frame.pack(fill="x", pady=(0, 20))
    busqueda_frame.pack_propagate(False)
    
    # Campo de código de barras
    ctk.CTkLabel(
        busqueda_frame,
        text="Código de Barras:",
        font=("Arial", 14)
    ).pack(side="left", padx=(20, 10), pady=20)
    
    codigo_entry = ctk.CTkEntry(
        busqueda_frame,
        width=200,
        height=35,
        font=("Arial", 14)
    )
    codigo_entry.pack(side="left", padx=(0, 20), pady=20)
    
    # Botón de búsqueda
    def buscar_garantia():
        codigo = codigo_entry.get().strip()
        if not codigo:
            messagebox.showwarning("Advertencia", "Por favor ingrese un código de barras")
            return
        
        try:
            conn = conectar_db()
            cursor = conn.cursor()
            
            # Consulta para obtener información de garantías
            cursor.execute("""
                SELECT 
                    m.id_movimiento, 
                    TO_CHAR(m.fecha_entrega, 'DD/MM/YYYY HH24:MI:SS') AS fecha_entrega,
                    p.descripcion, 
                    g.gar_duracion, 
                    TO_CHAR(m.fecha_entrega + (g.gar_duracion || ' months')::interval, 'DD/MM/YYYY') AS fecha_vencimiento,
                    CASE 
                        WHEN m.fecha_entrega + (g.gar_duracion || ' months')::interval >= CURRENT_DATE 
                        THEN 'VIGENTE' 
                        ELSE 'VENCIDA' 
                    END as estado,
                    m.id_usuario
                    FROM desarrollo.movimientos m
                    JOIN desarrollo.stock p 
                        ON m.id_producto = p.id_articulo
                    LEFT JOIN desarrollo.garantias g 
                        ON g.gar_categoria = p.categoria
                    WHERE m.cod_barra = %s AND m.tipo_movimiento = 'S'
                    ORDER BY m.fecha_entrega DESC
                LIMIT 10
            """, (codigo,))
            
            resultados = cursor.fetchall()
            cursor.close()
            conn.close()
            
            # Limpiar treeview
            for item in tree.get_children():
                tree.delete(item)
            
            # Insertar resultados
            if resultados:
                for row in resultados:
                    tree.insert("", "end", values=row)
            else:
                messagebox.showinfo("Información", "No se encontraron garantías para este código de barras")
                
        except Exception as e:
            messagebox.showerror("Error", f"No se pudo conectar a la base de datos:\n{e}")
    
    btn_buscar = ctk.CTkButton(
        busqueda_frame,
        text="Buscar",
        width=100,
        height=35,
        fg_color="#FF9100",
        hover_color="#E07B00",
        command=buscar_garantia
    )
    btn_buscar.pack(side="left", padx=(0, 20), pady=20)
    
    # Botón para limpiar búsqueda
    def limpiar_busqueda():
        codigo_entry.delete(0, "end")
        for item in tree.get_children():
            tree.delete(item)
    
    btn_limpiar = ctk.CTkButton(
        busqueda_frame,
        text="Limpiar",
        width=100,
        height=35,
        fg_color="#6c757d",
        hover_color="#5a6268",
        command=limpiar_busqueda
    )
    btn_limpiar.pack(side="left", padx=(0, 20), pady=20)
    
    # Frame para resultados
    resultados_frame = ctk.CTkFrame(main_frame)
    resultados_frame.pack(fill="both", expand=True)
    
    # Treeview para mostrar los resultados
    columns = ("ID Movimiento", "Fecha de Entrega", "Producto", "Duración (meses)", 
               "Fin Garantía", "Estado", "Usuario Entrega")
    
    tree = ttk.Treeview(resultados_frame, columns=columns, show="headings", height=8)
    
    # Configurar columnas
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=120, anchor="center")
    
    # Ajustar algunas columnas
    tree.column("Producto", width=200)
    tree.column("Fin Garantía", width=120)
    
    # Scrollbar
    scrollbar = ttk.Scrollbar(resultados_frame, orient="vertical", command=tree.yview)
    tree.configure(yscrollcommand=scrollbar.set)
    
    tree.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")
    
    # Botón para volver al menú principal de movimientos
    btn_volver = ctk.CTkButton(
        main_frame,
        text="Volver",
        width=120,
        height=40,
        fg_color="#FF9100",
        hover_color="#E07B00",
        command=lambda: mostrar_movimientos(contenido_frame)
    )
    btn_volver.pack(pady=20)
